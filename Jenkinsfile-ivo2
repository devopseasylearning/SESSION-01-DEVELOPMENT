pipeline {
    agent any
     
     environment {
        USERNAME = 'devopeasylearning2021'
        
    }

    options { buildDiscarder(logRotator(artifactDaysToKeepStr: '',
     artifactNumToKeepStr: '', daysToKeepStr: '3', numToKeepStr: '5')),
      disableConcurrentBuilds() }

    stages {
        stage('Build images ') {
            steps {
                sh '''
                docker build -t ivo:001 .

                '''
            }
        }
        stage {
            steps ('Tag image ') {
                sh '''
                docker tag ivo:001 devopseasylearning2021/ivo:001
                '''
            }
        }
        
        stage {
                steps ('Docker login') {
                sh '''
                'echo $DOCKERHUB_CREDENTIALS_psw | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                '''
            }
        }

        stage ('Docker push') {
            steps {
                sh '''
                docker push devopseasylearning2021/ivo:001
                '''
            }

        }

    }
     
   post {
   
      success {
         slackSend (channel: '#development-alerts', color: 'good', message: "SUCCESSFUL:  Branch name  <<${env.BRANCH_NAME}>>  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }

 
      unstable {
        slackSend (channel: '#development-alerts', color: 'warning', message: "UNSTABLE:  Branch name  <<${env.BRANCH_NAME}>>  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }

      failure {
        slackSend (channel: '#development-alerts', color: '#FF0000', message: "FAILURE:  Branch name  <<${env.BRANCH_NAME}>> Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
   
      cleanup {
        deleteDir()
        }
    }
}
